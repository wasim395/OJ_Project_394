const { callLLM } = require("./llmClient");
const Problem = require("../../models/Problems");

// Helper to safely extract JSON from messy LLM output
function extractJSON(raw) {
  const match = raw.match(/\{[\s\S]*\}/); // find first {...} block
  if (!match) {
    console.error("No JSON object found in LLM output:", raw);
    throw new Error("No JSON found in LLM output");
  }

  try {
    return JSON.parse(match[0]);
  } catch (err) {
    console.error("JSON parsing failed. Raw output:", match[0]);
    throw new Error("Failed to parse LLM output as JSON");
  }
}

async function generateProblem(adminInput, adminId) {
  const prompt = `
You are a problem setter for coding platforms.
Generate a coding problem in strict JSON format with the following fields:
{
  "title": "string",
  "problemStatement": "string",
  "expectedInput": "string",
  "expectedOutput": "string",
  "constraints": ["string"],
  "sampleTestCases": [{ "input": "string", "output": "string" }]
}

⚠️ Respond ONLY with valid JSON. No explanations.

Admin input (may be partial):
${JSON.stringify(adminInput, null, 2)}
`;

  let rawOutput;
  try {
    rawOutput = await callLLM(prompt);
    console.log("LLM raw output:", rawOutput);
  } catch (err) {
    throw new Error("Failed to generate content from LLM");
  }

  const problemData = extractJSON(rawOutput);

  // Basic validation
  if (!problemData.title || !problemData.problemStatement || !problemData.sampleTestCases?.length) {
    console.error("Incomplete problem generated:", problemData);
    throw new Error("Incomplete problem data generated by LLM");
  }

  const finalProblem = new Problem({
    title: adminInput.title || problemData.title,
    problemStatement: adminInput.problemStatement || problemData.problemStatement,
    expectedInput: adminInput.expectedInput || problemData.expectedInput,
    expectedOutput: adminInput.expectedOutput || problemData.expectedOutput,
    constraints: adminInput.constraints?.length ? adminInput.constraints : problemData.constraints || [],
    sampleTestCases: adminInput.sampleTestCases?.length ? adminInput.sampleTestCases : problemData.sampleTestCases,
    difficulty: adminInput.difficulty || "easy",
    tags: adminInput.tags || [],
    createdBy: adminId, // ✅ from auth middleware
    status: "draft",
  });

  await finalProblem.save();
  return finalProblem;
}

module.exports = { generateProblem };
