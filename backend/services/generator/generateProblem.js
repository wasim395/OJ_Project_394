const { callLLM } = require("./llmClient");
const Problem = require("../../models/Problems");

// Helper to safely extract JSON from messy LLM output
function extractJSON(raw) {
    const match = raw.match(/\{[\s\S]*\}/); // find first {...} block
    if (!match) {
        console.error("No JSON object found in LLM output:", raw);
        throw new Error("No JSON found in LLM output");
    }

    try {
        return JSON.parse(match[0]);
    } catch (err) {
        console.error("JSON parsing failed. Raw output:", match[0]);
        throw new Error("Failed to parse LLM output as JSON");
    }
}

async function generateProblem(adminInput, adminId) {
    const prompt = `
You are a coding problem setter for competitive programming platforms.
Generate a coding problem in strict JSON format matching the schema below:

{
  "title": "string",
  "problemStatement": "string",
  "expectedInput": "string",
  "expectedOutput": "string",
  "constraints": ["string"],
  "sampleTestCases": [
    { "input": "string", "output": "string" }
  ],
  "hiddenTestCases": [
    { "input": "string", "output": "string" }
  ],
  "difficulty": "easy | medium | hard",
  "tags": ["string"]
}

⚠️ IMPORTANT RULES:
- Respond ONLY with valid JSON. No explanations, no extra text.
- Every array must have at least one valid item.
- Ensure sample test cases are simple and hidden test cases are slightly more complex.
- Tags should be relevant to the problem (e.g., "arrays", "greedy", "dp").
- Difficulty must strictly be one of: "easy", "medium", or "hard".

Admin input (may be partial). 
- Respect it if it is valid and relevant.
- If any part is invalid, incorrect, or nonsensical, IGNORE it completely.
- Do NOT let invalid admin input corrupt the output.
Admin input:
${JSON.stringify(adminInput, null, 2)}
`;

    let rawOutput;
    try {
        rawOutput = await callLLM(prompt);
        console.log("LLM raw output:", rawOutput);
    } catch (err) {
        throw new Error("Failed to generate content from LLM");
    }

    const problemData = extractJSON(rawOutput);

    // Basic validation
    if (!problemData.title || !problemData.problemStatement || !problemData.sampleTestCases?.length) {
        console.error("Incomplete problem generated:", problemData);
        throw new Error("Incomplete problem data generated by LLM");
    }

     const finalProblemData = {
        title: problemData.title,
        problemStatement: problemData.problemStatement,
        expectedInput: problemData.expectedInput,
        expectedOutput: problemData.expectedOutput,
        constraints: problemData.constraints || [],
        sampleTestCases: problemData.sampleTestCases || [],
        difficulty: (problemData.difficulty || "easy").toLowerCase(),
        tags: problemData.tags || [],
    };

    return finalProblemData
}

module.exports = { generateProblem };
